import { appState } from '../state.js';
import { generateAndDisplaySchema, createSchemaItem } from '../schema.js';
import { render } from '../renderer.js';
import { clearState as clearPersistence } from '../persistence.js';
import { showToast } from '../utils.js';

export function handleGlobalDetailChange(e) {
    const { id, value } = e.target;
    if (id === 'schemaTitle') appState.title = value;
    if (id === 'schemaDescription') appState.description = value;
    generateAndDisplaySchema();
}

export function resetSchemaDefinitionForRootType() {
    const type = appState.rootSchemaType;
    if (type === 'object' || type === 'oneOf') {
        appState.schemaDefinition = [];
    } else if (type === 'array') {
        appState.schemaDefinition = createSchemaItem({ type: 'string' });
    } else {
        appState.schemaDefinition = createSchemaItem({ type });
    }
}

export function handleRootTypeChange(e) {
    appState.rootSchemaType = e.target.value;
    resetSchemaDefinitionForRootType();
    render();
}

export function handleClearSchema() {
    if (confirm('Are you sure you want to clear the entire schema and start over? This cannot be undone.')) {
        clearPersistence();
        
        // Reset state to initial values
        appState.rootSchemaType = 'object';
        appState.title = 'Generated Schema';
        appState.description = 'A schema generated by the JSON Schema Builder';
        appState.definitions = [];
        appState.schemaDefinition = [];
        appState.nextId = 0;
        
        resetSchemaDefinitionForRootType();
        render();
        showToast("Schema cleared.");
    }
}
